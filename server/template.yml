AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  setzen-websockets-app
  SAM Template for setzen-websockets-app that has the DynamoDB table and Lambda
  functions needed to create the Websocket protocol on API Gateway.
Parameters:
  ConnectionsTableName:
    Type: String
    Default: 'setzen_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  ChunksTableName:
    Type: String
    Default: 'setzen_chunks'
    Description: (Required) The name of the new DynamoDB to store chunk state. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  ChunkInfoTableName:
    Type: String
    Default: 'setzen_chunk_info'
    Description: (Required) The name of the new DynamoDB to store chunk info state. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  ChunkLocksTableName:
    Type: String
    Default: 'setzen_chunk_locks'
    Description: (Required) The name of the new DynamoDB to store the lock state of the chunks. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  UpdatesTableName:
    Type: String
    Default: 'setzen_updates'
    Description: (Required) The name of the new DynamoDB to store all updates. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  QueueTableName:
    Type: String
    Default: 'setzen_queue'
    Description: (Required) The name of the new DynamoDB to store all queued updates that will be persisted to the chunks table. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:
  SetzenWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SetzenWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SetzenWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SetzenWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SetzenWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SetzenWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SetzenWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SetzenWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref SetzenWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SetzenWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False # Disabled to not incur AWS Key Management Service costs.
      TableName: !Ref ConnectionsTableName
  ChunksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "chunkId"
          AttributeType: "N"
        # - AttributeName: "colorIds"
        #   AttributeType: "B"
        # - AttributeName: "lastUpdatedAt"
        #   AttributeType: "N" # Unix time in milliseconds
      KeySchema:
        - AttributeName: "chunkId"
          KeyType: "HASH"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: !Ref ChunksTableName
  ChunkInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # To avoid unnecessarily reading/writing to the Chunks table, we store
      # metadata in this table.
      AttributeDefinitions:
        - AttributeName: "chunkId"
          AttributeType: "N"
        # - AttributeName: "lastUpdatedAt"
        #   AttributeType: "N" # Unix time in milliseconds
      KeySchema:
        - AttributeName: "chunkId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: !Ref ChunkInfoTableName
  ChunkLocksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # To avoid unnecessarily reading/writing to the Chunks table, we store
      # the lock data in this table.
      AttributeDefinitions:
        - AttributeName: "chunkId"
          AttributeType: "N"
        # - AttributeName: "lockedAt"
        #   AttributeType: "N" # Unix time in milliseconds
      KeySchema:
        - AttributeName: "chunkId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: !Ref ChunkLocksTableName
  UpdatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        # This table is likely to store millions of entries.
        # Attribute names are kept short to reduce amount of storage used.
        - AttributeName: "i" # Item UUID
          AttributeType: "S"
        # - AttributeName: "a" # Author (Currently just the Connection ID)
        #   AttributeType: "S"
        # - AttributeName: "p" # Position
        #   AttributeType: "N"
        # - AttributeName: "c" # Color ID
        #   AttributeType: "N"
        # - AttributeName: "t" # Time
        #   AttributeType: "N" # Unix time in milliseconds
      KeySchema:
        - AttributeName: "i"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: !Ref UpdatesTableName
  QueueTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        # If the same position is updated by different processes we do not expect an entry
        # to exist more than once in the queue. Therefore we can safely use the position
        # as the key.
        - AttributeName: "position"
          AttributeType: "N"
        # - AttributeName: "colorId"
        #   AttributeType: "N"
        # - AttributeName: "time"
        #   AttributeType: "N" # Unix time in milliseconds
      KeySchema:
        - AttributeName: "position"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: False
      TableName: !Ref QueueTableName
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs18.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SetzenWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SetzenWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs16.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableName
          CHUNKS_TABLE_NAME: !Ref ChunksTableName
          CHUNK_INFO_TABLE_NAME: !Ref ChunkInfoTableName
          CHUNK_LOCKS_TABLE_NAME: !Ref ChunkLocksTableName
          UPDATES_TABLE_NAME: !Ref UpdatesTableName
          QUEUE_TABLE_NAME: !Ref QueueTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ChunksTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ChunkInfoTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ChunkLocksTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref UpdatesTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref QueueTableName
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SetzenWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SetzenWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SetzenWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
